// <auto-generated />
using System;
using FullStackAssignment.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FullStackAssignment.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("ProductCodeSeq")
                .StartsAt(4L);

            modelBuilder.Entity("FullStackAssignment.Domain.Entites.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = new Guid("379ba4ed-a814-4058-a0a0-a7436ceeb3b3"),
                            CategoryName = "Electronics"
                        },
                        new
                        {
                            CategoryId = new Guid("d6701001-5662-41b1-8d13-13cc55f78a30"),
                            CategoryName = "Fashion"
                        });
                });

            modelBuilder.Entity("FullStackAssignment.Domain.Entites.Product", b =>
                {
                    b.Property<string>("ProductCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("DiscountRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,4)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("MinimumQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ProductCode");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductCode = "P00001",
                            CategoryId = new Guid("379ba4ed-a814-4058-a0a0-a7436ceeb3b3"),
                            DiscountRate = 0.05m,
                            Image = "/images/products/iphone.jpeg",
                            MinimumQuantity = 1,
                            Name = "Smartphone",
                            Price = 599.99m
                        },
                        new
                        {
                            ProductCode = "P00002",
                            CategoryId = new Guid("379ba4ed-a814-4058-a0a0-a7436ceeb3b3"),
                            DiscountRate = 0.10m,
                            Image = "/images/products/laptop.jpg",
                            MinimumQuantity = 1,
                            Name = "Laptop",
                            Price = 1999.99m
                        },
                        new
                        {
                            ProductCode = "P00003",
                            CategoryId = new Guid("d6701001-5662-41b1-8d13-13cc55f78a30"),
                            DiscountRate = 0.10m,
                            Image = "/images/products/tshirt.jpg",
                            MinimumQuantity = 2,
                            Name = "T-Shirt",
                            Price = 19.99m
                        });
                });

            modelBuilder.Entity("FullStackAssignment.Domain.Entites.User", b =>
                {
                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime2");

                    b.HasKey("UserName");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserName = "admin",
                            EmailAddress = "admin@example.com",
                            HashedPassword = "tAYkefNRbgerfqenlCh73g==.7f8xyKILm9tCL0faOUwbLF0KR9y/JdnkPVbAdbE56tY=",
                            LastLoginDate = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("FullStackAssignment.Domain.Entites.Product", b =>
                {
                    b.HasOne("FullStackAssignment.Domain.Entites.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
